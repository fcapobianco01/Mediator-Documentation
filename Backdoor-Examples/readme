#1 selinux_subject_logic_bomb:

The primary purpose of this backdoor is hijack the current task security struct and alter 
the subject id, when the subject user id for the request meets a certain criteria. Initially 
I have chosen the naive logic of checking that the user id is greater than 1000. If this is satisfied
then the requesting subject user should be a user on the system.

Changing the sid is difficult. SID's are indicies in the sidtable, which map to a security context. In theory we can alter the subject in a couple ways. #1 Grab the security context through normal means (i.e. using credentials "cred_sid(cred)") and modifying all necessary fields, which requires a number of modifications but I believe is doable. #2 Modify the credentials passed in. I believe this requires less modification as we can set the subject user id to 2 (I believe 1 is root init, while 2 is root. This should be accurate on most systems afaik).

Note that this modification is performed within inode_has_perm as many SELinux calls push cred further down the call chain towards avc_has_perm. This would affect many hooks.


#2 tomoyo_underpriv_check:

This backdoor example leverages the concept of checking for a permission that the user might have and additionally granting other permissiong without checking those. In this case, we check for read regardless of whether the subject is opening the file to read or write.

Checking this with our current endorsers would be problematic, as the label would be accurate for this backdoor example as we don't check that all possible permissions are checked, only that a label from permissions reaches the sink.

#3 tomoyo_no_perm_check:

This backdoor depends on poor implementation and considers the case where no permissions are checked. Fairly straight forward.

